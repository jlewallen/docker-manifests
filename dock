#!/usr/bin/python
#
#
#

import os
import optparse
import re

from cloudvm.models import *

class Options:
	def __init__(self, entries, args): 
		self.__dict__.update(entries)	
		self.manifests = args

def get_options():
	parser = optparse.OptionParser()
	parser.add_option("--delete-images", action="store_true", dest="delete_images", default=False, help="delete images")
	parser.add_option("--delete-exited", action="store_true", dest="delete_exited", default=False, help="delete exited")
	parser.add_option("--kill-all", action="store_true", dest="kill_all", default=False, help="kill all")
	parser.add_option("--stop", action="store_true", dest="stop", default=False, help="stop instances")
	parser.add_option("--kill", action="store_true", dest="kill", default=False, help="kill instances")
	parser.add_option("--web", action="store_true", dest="web", default=False, help="run web server")
	parser.add_option("--state", dest="state_file_path", default="dock.state", metavar="FILE", help="state file")
	raw_options, args = parser.parse_args()
	return Options(vars(raw_options), args)

def main():
	options = get_options()
	docker = Configuration.get_docker()

	if os.geteuid() != 0:
		exit("You need to have root privileges to run this script.\nPlease try again, this time using 'sudo'. Exiting.")

	if options.web:
		from cloudvm.dashboard.app import app
		port = int(os.environ.get('PORT', 5000))
		app.options = options
		app.run(host='0.0.0.0', port=port)
		return

	ctx = Context(docker, None, State.load(options.state_file_path))

	if options.kill_all:
		HostMachine().kill_all(ctx)

	if options.delete_exited:
		HostMachine().delete_exited(ctx)

	if options.delete_images:
		HostMachine().delete_images(ctx)

	for path in options.manifests:
		ctx.state.purge(ctx)
		manifest = Manifest.load(path, ctx)
		if options.stop:
			manifest.stop(ctx)
		elif options.kill:
			manifest.kill(ctx)
		else:
			manifest.provision(ctx)

	ctx.save()

main()
